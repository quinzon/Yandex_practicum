x-common-variables: &common-variables
  networks:
    - backend_network

x-common-healthcheck: &common-healthcheck
  interval: 10s
  timeout: 10s
  retries: 5

x-common-env: &common-env
  env_file:
    - .env

services:
  postgres:
    build:
      context: .
      args:
        POSTGRES_SQL_DB: ${POSTGRES_SQL_DB}
      dockerfile: ./postgres/Dockerfile
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./postgres/database_dump.sql:/docker-entrypoint-initdb.d/init.sql
      - ./postgres/init_pg_partman.sql:/docker-entrypoint-initdb.d/init_pg_partman.sql
    environment:
      POSTGRES_SQL_DB: ${POSTGRES_SQL_DB}
    healthcheck:
      <<: *common-healthcheck
      test: [ "CMD-SHELL", "pg_isready -U ${POSTGRES_USER} || exit 1" ]
    <<: [ *common-variables, *common-env ]


  elasticsearch:
    image: elasticsearch:8.6.2
    environment:
      ES_JAVA_OPTS: "${ES_JAVA_OPTS}"
      discovery.type: "${DISCOVERY_TYPE}"
      xpack.security.enabled: "${XPACK_SECURITY_ENABLED}"
    volumes:
      - es-data:/usr/share/elasticsearch/data
    healthcheck:
      <<: *common-healthcheck
      test: [ "CMD-SHELL", "curl --silent --fail localhost:9200/_cluster/health || exit 1" ]
    <<: [ *common-variables, *common-env ]

  etl:
    build:
      context: ./etl
      dockerfile: Dockerfile
    env_file:
      - etl/.env.etl
    command: [ "python", "/opt/app/etl/main.py" ]
    depends_on:
      elasticsearch:
        condition: service_healthy
      postgres:
        condition: service_healthy
    <<: [ *common-variables, *common-env ]

  redis:
    image: redis:latest
    volumes:
      - redis-data:/data
    healthcheck:
      <<: *common-healthcheck
      test: [ "CMD", "redis-cli", "ping" ]
    <<: [ *common-variables, *common-env ]

  movie_service:
    build:
      context: ./movie_service
      dockerfile: Dockerfile
    image: movie_service
    command: [ "uvicorn", "src.main:app", "--host", "0.0.0.0", "--port", "8000" ]
    env_file:
      - movie_service/.env
    depends_on:
      redis:
        condition: service_healthy
      elasticsearch:
        condition: service_healthy
      postgres:
        condition: service_healthy
      etl:
        condition: service_started
    <<: [ *common-variables ]

  auth_service:
    build:
      context: ./auth_service
      dockerfile: Dockerfile
    image: auth_service
    command: [ "sh", "-c", "alembic upgrade head && uvicorn src.main:app --host 0.0.0.0 --port 8001" ]
    container_name: auth_service
    ports:
      - "8001:8001"
    env_file:
      - auth_service/.env
    depends_on:
      redis:
        condition: service_healthy
      postgres:
        condition: service_healthy
    <<: [ *common-variables ]

  admin_service:
    build:
      context: ./admin_service
      dockerfile: Dockerfile
    image: admin_service
    command: [ "gunicorn", "config.wsgi:application", "--bind", "0.0.0.0:8002", "--reload" ]
    volumes:
      - ./admin_service:/opt/admin_service
      - admin-static:/opt/admin_service/static
    env_file:
      - admin_service/.env
    depends_on:
      postgres:
        condition: service_healthy
    <<: [ *common-variables ]

  ugc_service:
    build:
      context: ./ugc_service
      dockerfile: Dockerfile
    image: ugc_service
    command: [ "uvicorn", "src.main:app", "--host", "0.0.0.0", "--port", "8003", "--reload" ]
    env_file:
      - ugc_service/.env
    #logging:
    #  driver: gelf
    #  options:
    #    gelf-address: "udp://logstash:5044"
    volumes:
      - sentry-data:/opt/sentry
    depends_on:
      mongo_init:
        condition: service_completed_successfully
      sentry:
        condition: service_completed_successfully
      redis:
        condition: service_started
      auth_service:
        condition: service_started
      #logstash:
      #  condition: service_started
    <<: [ *common-variables ]

  nginx:
    image: nginx:latest
    ports:
      - "80:80"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/site.conf:/etc/nginx/conf.d/default.conf:ro
      - admin-static:/opt/admin_service/static:ro
    depends_on:
      movie_service:
        condition: service_started
      auth_service:
        condition: service_started
      admin_service:
        condition: service_started
      ugc_service:
        condition: service_started
    <<: *common-variables

  jaeger:
    image: jaegertracing/all-in-one:1.60
    ports:
      - "6831:6831/udp"
      - "16686:16686"
    <<: *common-variables

  kafka-0:
    image: bitnami/kafka:3.4
    env_file:
      - ./bigdata_service/.env
    environment:
      - KAFKA_CFG_NODE_ID=0
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:9093,EXTERNAL://:9094
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka-0:9092,EXTERNAL://127.0.0.1:9094
    healthcheck:
      test: [ "CMD-SHELL", "kafka-cluster.sh cluster-id --bootstrap-server kafka-0:9092 || exit 1" ]
      interval: 5s
      timeout: 5s
      retries: 3
      start_period: 10s
    <<: [ *common-variables ]

  kafka-1:
    image: bitnami/kafka:3.4
    env_file:
      - ./bigdata_service/.env
    environment:
      - KAFKA_CFG_NODE_ID=1
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:9093,EXTERNAL://:9095
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka-1:9092,EXTERNAL://127.0.0.1:9095
    healthcheck:
      test: [ "CMD-SHELL", "kafka-cluster.sh cluster-id --bootstrap-server kafka-1:9092 || exit 1" ]
      interval: 5s
      timeout: 5s
      retries: 3
      start_period: 10s
    <<: [ *common-variables ]

  kafka-2:
    image: bitnami/kafka:3.4
    env_file:
      - ./bigdata_service/.env
    environment:
      - KAFKA_CFG_NODE_ID=2
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:9093,EXTERNAL://:9096
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka-2:9092,EXTERNAL://127.0.0.1:9096
    healthcheck:
      test: [ "CMD-SHELL", "kafka-cluster.sh cluster-id --bootstrap-server kafka-2:9092 || exit 1" ]
      interval: 5s
      timeout: 5s
      retries: 3
      start_period: 10s
    <<: [ *common-variables ]

  kafka-init:
    image: bitnami/kafka:3.4
    depends_on:
      kafka-0:
        condition: service_healthy
      kafka-1:
        condition: service_healthy
      kafka-2:
        condition: service_healthy
    volumes:
      - ./bigdata_service/entrypoint.sh:/entrypoint.sh
      - ./bigdata_service/.env:/.env
    env_file:
      - .env
    entrypoint: [ "/bin/bash", "/entrypoint.sh" ]
    <<: [ *common-variables ]

  kafka-ui:
    image: provectuslabs/kafka-ui:v0.7.0
    ports:
      - "8080:8080"
    environment:
      - KAFKA_CLUSTERS_0_BOOTSTRAP_SERVERS=kafka-0:9092
      - KAFKA_CLUSTERS_0_NAME=kraft
    <<: [ *common-variables ]

  bigdata_service:
    build:
      context: ./bigdata_service
      dockerfile: Dockerfile
    env_file:
      - bigdata_service/.env
    #logging:
    #  driver: gelf
    #  options:
    #    gelf-address: "udp://logstash:5044"
    volumes:
      - sentry-data:/opt/sentry
    depends_on:
      kafka-init:
        condition: service_completed_successfully
      sentry:
        condition: service_completed_successfully
      #logstash:
      #  condition: service_started
    <<: [ *common-variables ]

  zookeeper:
    image: zookeeper:3.8
    hostname: zookeeper
    <<: [ *common-variables ]

  clickhouse-node1:
    image: clickhouse/clickhouse-server:23
    hostname: clickhouse-node1
    ports:
      - "8123:8123"
      - "9000:9000"
    volumes:
      - ./clickhouse/data/node1:/etc/clickhouse-server
      - clickhouse-node1-data:/var/lib/clickhouse
    depends_on:
      zookeeper:
        condition: service_started
    healthcheck:
      test: [ "CMD-SHELL", "clickhouse-client --host=127.0.0.1 --query='SELECT 1' || exit 1" ]
      <<: *common-healthcheck
    <<: [ *common-variables ]

  clickhouse-node2:
    image: clickhouse/clickhouse-server:23
    hostname: clickhouse-node2
    ports:
      - "8124:8123"
      - "9001:9000"
    volumes:
      - ./clickhouse/data/node2:/etc/clickhouse-server
      - clickhouse-node2-data:/var/lib/clickhouse
    depends_on:
      zookeeper:
        condition: service_started
    healthcheck:
      test: [ "CMD-SHELL", "clickhouse-client --host=127.0.0.1 --query='SELECT 1' || exit 1" ]
      <<: *common-healthcheck
    <<: [ *common-variables ]

  clickhouse-node3:
    image: clickhouse/clickhouse-server:23
    hostname: clickhouse-node3
    ports:
      - "8125:8123"
      - "9002:9000"
    volumes:
      - ./clickhouse/data/node3:/etc/clickhouse-server
      - clickhouse-node3-data:/var/lib/clickhouse
    depends_on:
      zookeeper:
        condition: service_started
    healthcheck:
      test: [ "CMD-SHELL", "clickhouse-client --host=127.0.0.1 --query='SELECT 1' || exit 1" ]
      <<: *common-healthcheck
    <<: [ *common-variables ]

  clickhouse-node4:
    image: clickhouse/clickhouse-server:23
    hostname: clickhouse-node4
    ports:
      - "8126:8123"
      - "9003:9000"
    volumes:
      - ./clickhouse/data/node4:/etc/clickhouse-server
      - clickhouse-node4-data:/var/lib/clickhouse
    depends_on:
      zookeeper:
        condition: service_started
    healthcheck:
      test: [ "CMD-SHELL", "clickhouse-client --host=127.0.0.1 --query='SELECT 1' || exit 1" ]
      <<: *common-healthcheck
    <<: [ *common-variables ]

  bigdata-etl:
    build:
      context: ./bigdata_etl
      dockerfile: Dockerfile
    command: [ "python", "/opt/app/bigdata_etl/main.py" ]
    depends_on:
      kafka-init:
        condition: service_completed_successfully
      clickhouse-node1:
        condition: service_healthy
      clickhouse-node2:
        condition: service_healthy
      clickhouse-node3:
        condition: service_healthy
      clickhouse-node4:
        condition: service_healthy
    <<: [ *common-variables ]

  mongo_init:
    container_name: mongo_init
    image: mongo:latest
    depends_on:
      - mongos1
      - mongos2
    volumes:
      - ./setup_mongo.sh:/docker-entrypoint-initdb.d/setup_mongo.sh:ro
    command: [ "sh", "-c", "sleep 10 && /docker-entrypoint-initdb.d/setup_mongo.sh" ]
    <<: [ *common-variables ]

  mongors1n1:
    container_name: mongors1n1
    image: mongo
    command: mongod --shardsvr --replSet mongors1 --dbpath /data/db --port 27017
    expose:
      - "27017"
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - mongo_data1:/data/db
    <<: [ *common-variables ]

  mongors1n2:
    container_name: mongors1n2
    image: mongo
    command: mongod --shardsvr --replSet mongors1 --dbpath /data/db --port 27017
    expose:
      - "27017"
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - mongo_data2:/data/db
    <<: [ *common-variables ]

  mongors1n3:
    container_name: mongors1n3
    image: mongo
    command: mongod --shardsvr --replSet mongors1 --dbpath /data/db --port 27017
    expose:
      - "27017"
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - mongo_data3:/data/db
    <<: [ *common-variables ]

  mongors2n1:
    container_name: mongors2n1
    image: mongo
    command: mongod --shardsvr --replSet mongors2 --dbpath /data/db --port 27017
    expose:
      - "27017"
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - mongo_data4:/data/db
    <<: [ *common-variables ]

  mongors2n2:
    container_name: mongors2n2
    image: mongo
    command: mongod --shardsvr --replSet mongors2 --dbpath /data/db --port 27017
    expose:
      - "27017"
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - mongo_data5:/data/db
    <<: [ *common-variables ]

  mongors2n3:
    container_name: mongors2n3
    image: mongo
    command: mongod --shardsvr --replSet mongors2 --dbpath /data/db --port 27017
    expose:
      - "27017"
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - mongo_data6:/data/db
    <<: [ *common-variables ]

  mongocfg1:
    container_name: mongocfg1
    image: mongo
    command: mongod --configsvr --replSet mongors1conf --dbpath /data/db --port 27017
    expose:
      - "27017"
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - mongo_config1:/data/db
    <<: [ *common-variables ]

  mongocfg2:
    container_name: mongocfg2
    image: mongo
    command: mongod --configsvr --replSet mongors1conf --dbpath /data/db --port 27017
    expose:
      - "27017"
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - mongo_config2:/data/db
    <<: [ *common-variables ]

  mongocfg3:
    container_name: mongocfg3
    image: mongo
    command: mongod --configsvr --replSet mongors1conf --dbpath /data/db --port 27017
    expose:
      - "27017"
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - mongo_config3:/data/db
    <<: [ *common-variables ]

  mongos1:
    container_name: mongos1
    image: mongo
    depends_on:
      - mongocfg1
      - mongocfg2
      - mongocfg3
    command: mongos --configdb mongors1conf/mongocfg1:27017,mongocfg2:27017,mongocfg3:27017 --port 27017 --bind_ip_all
    expose:
      - "27017"
    volumes:
      - /etc/localtime:/etc/localtime:ro
    <<: [ *common-variables ]

  mongos2:
    container_name: mongos2
    image: mongo
    depends_on:
      - mongocfg1
      - mongocfg2
      - mongocfg3
    command: mongos --configdb mongors1conf/mongocfg1:27017,mongocfg2:27017,mongocfg3:27017 --port 27017 --bind_ip_all
    expose:
      - "27017"
    volumes:
      - /etc/localtime:/etc/localtime:ro
    <<: [ *common-variables ]



  sentry:
    build:
      context: ./sentry
      dockerfile: Dockerfile
    volumes:
      - ./sentry:/opt/sentry
      - sentry-data:/opt/sentry
    networks:
      - backend_network
    env_file:
      - ./sentry/.env.sentry


  logstash:
    image: logstash:8.10.2
    depends_on:
      - elk_elasticsearch
    environment:
      - "XPACK_MONITORING_ENABLED:false"
      - "ELK_ES_HOST:elk_elasticsearch:9200"
      - "LS_JAVA_OPTS=-Xmx512m -Xms512m"
    ports:
      - "5044:5044/udp"
    volumes:
      - ./elk/logstash.conf:/config/logstash.conf:ro
    command: logstash -f /config/logstash.conf
    networks:
      - elk_network


  elk_elasticsearch:
    image: elasticsearch:8.10.2
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - ES_JAVA_OPTS=-Xms512m -Xmx512m
    ports:
      - 9200:9200
    volumes:
      - ./elk/esdata:/usr/share/elasticsearch/data
    networks:
      - elk_network

  kibana:
    image: kibana:8.10.2
    ports:
      - "5601:5601"
    depends_on:
      - elk_elasticsearch
    environment:
      - ELASTICSEARCH_HOSTS=http://elk_elasticsearch:9200
    networks:
      - elk_network


volumes:
  postgres-data:
  es-data:
  redis-data:
  admin-static:
  kafka_0_data:
  kafka_1_data:
  kafka_2_data:
  clickhouse-node1-data:
  clickhouse-node2-data:
  clickhouse-node3-data:
  clickhouse-node4-data:
  mongo_data1:
  mongo_data2:
  mongo_data3:
  mongo_data4:
  mongo_data5:
  mongo_data6:
  mongo_config1:
  mongo_config2:
  mongo_config3:
  sentry-data:


networks:
  backend_network:
    driver: bridge
  elk_network:
    driver: bridge

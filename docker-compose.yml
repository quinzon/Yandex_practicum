version: '3.8'

x-common-variables: &common-variables
  networks:
    - backend_network

x-common-healthcheck: &common-healthcheck
  interval: 10s
  timeout: 10s
  retries: 5

x-common-env: &common-env
  env_file:
    - .env

services:
  postgres:
    build:
      context: .
      args:
        POSTGRES_SQL_DB: ${POSTGRES_SQL_DB}
      dockerfile: ./postgres/Dockerfile
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./postgres/database_dump.sql:/docker-entrypoint-initdb.d/init.sql
      - ./postgres/init_pg_partman.sql:/docker-entrypoint-initdb.d/init_pg_partman.sql
    environment:
      POSTGRES_SQL_DB: ${POSTGRES_SQL_DB}
    healthcheck:
      <<: *common-healthcheck
      test: [ "CMD-SHELL", "pg_isready -U ${POSTGRES_USER} || exit 1" ]
    <<: [ *common-variables, *common-env ]


  elasticsearch:
    image: elasticsearch:8.6.2
    environment:
      ES_JAVA_OPTS: "${ES_JAVA_OPTS}"
      discovery.type: "${DISCOVERY_TYPE}"
      xpack.security.enabled: "${XPACK_SECURITY_ENABLED}"
    volumes:
      - es-data:/usr/share/elasticsearch/data
    healthcheck:
      <<: *common-healthcheck
      test: [ "CMD-SHELL", "curl --silent --fail localhost:9200/_cluster/health || exit 1" ]
    <<: [ *common-variables, *common-env ]

  etl:
    build:
      context: ./etl
      dockerfile: Dockerfile
    env_file:
      - etl/.env.etl
    command: [ "python", "/opt/app/etl/main.py" ]
    depends_on:
      elasticsearch:
        condition: service_healthy
      postgres:
        condition: service_healthy
    <<: [ *common-variables, *common-env ]

  redis:
    image: redis:latest
    volumes:
      - redis-data:/data
    healthcheck:
      <<: *common-healthcheck
      test: [ "CMD", "redis-cli", "ping" ]
    <<: [ *common-variables, *common-env ]

  movie_service:
    build:
      context: ./movie_service
      dockerfile: Dockerfile
    image: movie_service
    command: [ "uvicorn", "src.main:app", "--host", "0.0.0.0", "--port", "8000" ]
    env_file:
      - movie_service/.env
    depends_on:
      redis:
        condition: service_healthy
      elasticsearch:
        condition: service_healthy
      postgres:
        condition: service_healthy
      etl:
        condition: service_started
    <<: [ *common-variables ]

  auth_service:
    build:
      context: ./auth_service
      dockerfile: Dockerfile
    image: auth_service
    command: [ "sh", "-c", "alembic upgrade head && uvicorn src.main:app --host 0.0.0.0 --port 8001" ]
    env_file:
      - auth_service/.env
    depends_on:
      redis:
        condition: service_healthy
      postgres:
        condition: service_healthy
    <<: [ *common-variables ]

  admin_service:
    build:
      context: ./admin_service
      dockerfile: Dockerfile
    image: admin_service
    command: ["gunicorn", "config.wsgi:application", "--bind", "0.0.0.0:8002", "--reload"]
    volumes:
      - ./admin_service:/opt/admin_service
      - admin-static:/opt/admin_service/static
    env_file:
      - admin_service/.env
    depends_on:
      postgres:
        condition: service_healthy
    <<: [ *common-variables ]

  nginx:
    image: nginx:latest
    ports:
      - "80:80"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/site.conf:/etc/nginx/conf.d/default.conf:ro
      - admin-static:/opt/admin_service/static:ro
    depends_on:
      movie_service:
        condition: service_started
      auth_service:
        condition: service_started
      admin_service:
        condition: service_started
    <<: *common-variables

  jaeger:
    image: jaegertracing/all-in-one:1.60
    ports:
      - "6831:6831/udp"
      - "16686:16686"
    <<: *common-variables

  kafka-0:
    image: bitnami/kafka:3.4
    env_file:
      - ./bigdata_service/.env
    environment:
      - KAFKA_CFG_NODE_ID=0
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:9093,EXTERNAL://:9094
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka-0:9092,EXTERNAL://127.0.0.1:9094
    healthcheck:
      test: ["CMD-SHELL", "kafka-cluster.sh cluster-id --bootstrap-server kafka-0:9092 || exit 1"]
      interval: 5s
      timeout: 5s
      retries: 3
      start_period: 10s
    <<: [ *common-variables ]

  kafka-1:
    image: bitnami/kafka:3.4
    env_file:
      - ./bigdata_service/.env
    environment:
      - KAFKA_CFG_NODE_ID=1
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:9093,EXTERNAL://:9095
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka-1:9092,EXTERNAL://127.0.0.1:9095
    healthcheck:
      test: ["CMD-SHELL", "kafka-cluster.sh cluster-id --bootstrap-server kafka-1:9092 || exit 1"]
      interval: 5s
      timeout: 5s
      retries: 3
      start_period: 10s
    <<: [ *common-variables ]

  kafka-2:
    image: bitnami/kafka:3.4
    env_file:
      - ./bigdata_service/.env
    environment:
      - KAFKA_CFG_NODE_ID=2
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:9093,EXTERNAL://:9096
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka-2:9092,EXTERNAL://127.0.0.1:9096
    healthcheck:
      test: ["CMD-SHELL", "kafka-cluster.sh cluster-id --bootstrap-server kafka-2:9092 || exit 1"]
      interval: 5s
      timeout: 5s
      retries: 3
      start_period: 10s
    <<: [ *common-variables ]

  kafka-init:
    image: bitnami/kafka:3.4
    depends_on:
      kafka-0:
        condition: service_healthy
      kafka-1:
        condition: service_healthy
      kafka-2:
        condition: service_healthy
    volumes:
      - ./bigdata_service/entrypoint.sh:/entrypoint.sh
      - ./bigdata_service/.env:/.env
    env_file:
      - .env
    entrypoint: ["/bin/bash", "/entrypoint.sh"]
    <<: [ *common-variables ]

  kafka-ui:
    image: provectuslabs/kafka-ui:v0.7.0
    ports:
      - "8080:8080"
    environment:
      - KAFKA_CLUSTERS_0_BOOTSTRAP_SERVERS=kafka-0:9092
      - KAFKA_CLUSTERS_0_NAME=kraft
    <<: [ *common-variables ]

  bigdata_service:
    build:
      context: ./bigdata_service
      dockerfile: Dockerfile
    env_file:
      - bigdata_service/.env
    depends_on:
      kafka-init:
        condition: service_completed_successfully
    <<: [ *common-variables ]

volumes:
  postgres-data:
  es-data:
  redis-data:
  admin-static:
  kafka_0_data:
  kafka_1_data:
  kafka_2_data:

networks:
  backend_network:
    driver: bridge

version: '3.8'

x-common-variables: &common-variables
  networks:
    - app-network

x-common-healthcheck: &common-healthcheck
  interval: 10s
  timeout: 10s
  retries: 5

x-common-env: &common-env
  env_file:
    - .env

services:
  postgres:
    image: postgres:16-alpine
    volumes:
      - postgres-data:/var/lib/postgres/data
      - ./database_dump.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      <<: *common-healthcheck
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} || exit 1"]
    <<: [*common-variables, *common-env]

  elasticsearch:
    image: elasticsearch:8.6.2
    container_name: es
    environment:
      ES_JAVA_OPTS: "${ES_JAVA_OPTS}"
      discovery.type: "${DISCOVERY_TYPE}"
      cluster.routing.allocation.disk.watermark.high: "${DISK_WATERMARK_HIGH}"
      cluster.routing.allocation.disk.watermark.high.max_headroom: "${DISK_WATERMARK_HIGH_MAX_HEADROOM}"
      cluster.routing.allocation.disk.watermark.flood_stage: "${DISK_WATERMARK_FLOOD_STAGE}"
      cluster.routing.allocation.disk.watermark.flood_stage.max_headroom: "${DISK_WATERMARK_FLOOD_STAGE_MAX_HEADROOM}"
      cluster.routing.allocation.disk.watermark.low: "${DISK_WATERMARK_LOW}"
      cluster.routing.allocation.disk.watermark.low.max_headroom: "${DISK_WATERMARK_LOW_MAX_HEADROOM}"
      ingest.geoip.downloader.enabled: "${INGEST_GEOIP_DOWNLOADER_ENABLED}"
      xpack.security.enabled: "${XPACK_SECURITY_ENABLED}"
      ELASTIC_CONTAINER: "${ELASTIC_CONTAINER}"
    ports:
      - "9200:9200"
    volumes:
      - es-data:/usr/share/elasticsearch/data
    healthcheck:
      <<: *common-healthcheck
      test: ["CMD-SHELL", "curl --silent --fail localhost:9200/_cluster/health || exit 1"]
    <<: [*common-variables, *common-env]

  create-index:
    build:
      context: .
      dockerfile: Dockerfile
    entrypoint: ["/bin/sh", "/opt/app/create_index.sh"]
    depends_on:
      elasticsearch:
        condition: service_healthy
    <<: [*common-variables, *common-env]

  redis:
    image: redis:latest
    volumes:
      - redis-data:/data
    healthcheck:
      <<: *common-healthcheck
      test: ["CMD", "redis-cli", "ping"]
    <<: [*common-variables, *common-env]

  api:
    build:
      context: .
      dockerfile: Dockerfile
    command: ["uvicorn", "src.main:app", "--host", "0.0.0.0", "--port", "8000"]
    depends_on:
      redis:
        condition: service_healthy
      elasticsearch:
        condition: service_healthy
      postgres:
        condition: service_healthy
      create-index:
        condition: service_completed_successfully
    <<: [*common-variables, *common-env]

  nginx:
    image: nginx:latest
    ports:
      - "80:80"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/site.conf:/etc/nginx/conf.d/default.conf:ro
    depends_on:
      api:
        condition: service_started
    <<: *common-variables

volumes:
  postgres-data:
  es-data:
  redis-data:

networks:
  app-network:
    driver: bridge
